// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TextStreamerClient is the client API for TextStreamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextStreamerClient interface {
	// Finds the lines where word error is present.
	FindErrorWord(ctx context.Context, opts ...grpc.CallOption) (TextStreamer_FindErrorWordClient, error)
}

type textStreamerClient struct {
	cc grpc.ClientConnInterface
}

func NewTextStreamerClient(cc grpc.ClientConnInterface) TextStreamerClient {
	return &textStreamerClient{cc}
}

func (c *textStreamerClient) FindErrorWord(ctx context.Context, opts ...grpc.CallOption) (TextStreamer_FindErrorWordClient, error) {
	stream, err := c.cc.NewStream(ctx, &TextStreamer_ServiceDesc.Streams[0], "/proto.TextStreamer/FindErrorWord", opts...)
	if err != nil {
		return nil, err
	}
	x := &textStreamerFindErrorWordClient{stream}
	return x, nil
}

type TextStreamer_FindErrorWordClient interface {
	Send(*TextInput) error
	Recv() (*ErrorWordLines, error)
	grpc.ClientStream
}

type textStreamerFindErrorWordClient struct {
	grpc.ClientStream
}

func (x *textStreamerFindErrorWordClient) Send(m *TextInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *textStreamerFindErrorWordClient) Recv() (*ErrorWordLines, error) {
	m := new(ErrorWordLines)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TextStreamerServer is the server API for TextStreamer service.
// All implementations must embed UnimplementedTextStreamerServer
// for forward compatibility
type TextStreamerServer interface {
	// Finds the lines where word error is present.
	FindErrorWord(TextStreamer_FindErrorWordServer) error
	mustEmbedUnimplementedTextStreamerServer()
}

// UnimplementedTextStreamerServer must be embedded to have forward compatible implementations.
type UnimplementedTextStreamerServer struct {
}

func (UnimplementedTextStreamerServer) FindErrorWord(TextStreamer_FindErrorWordServer) error {
	return status.Errorf(codes.Unimplemented, "method FindErrorWord not implemented")
}
func (UnimplementedTextStreamerServer) mustEmbedUnimplementedTextStreamerServer() {}

// UnsafeTextStreamerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextStreamerServer will
// result in compilation errors.
type UnsafeTextStreamerServer interface {
	mustEmbedUnimplementedTextStreamerServer()
}

func RegisterTextStreamerServer(s grpc.ServiceRegistrar, srv TextStreamerServer) {
	s.RegisterService(&TextStreamer_ServiceDesc, srv)
}

func _TextStreamer_FindErrorWord_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TextStreamerServer).FindErrorWord(&textStreamerFindErrorWordServer{stream})
}

type TextStreamer_FindErrorWordServer interface {
	Send(*ErrorWordLines) error
	Recv() (*TextInput, error)
	grpc.ServerStream
}

type textStreamerFindErrorWordServer struct {
	grpc.ServerStream
}

func (x *textStreamerFindErrorWordServer) Send(m *ErrorWordLines) error {
	return x.ServerStream.SendMsg(m)
}

func (x *textStreamerFindErrorWordServer) Recv() (*TextInput, error) {
	m := new(TextInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TextStreamer_ServiceDesc is the grpc.ServiceDesc for TextStreamer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextStreamer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TextStreamer",
	HandlerType: (*TextStreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindErrorWord",
			Handler:       _TextStreamer_FindErrorWord_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stack_stream.proto",
}
